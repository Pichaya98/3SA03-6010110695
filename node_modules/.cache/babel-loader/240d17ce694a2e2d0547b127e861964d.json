{"ast":null,"code":"var _jsxFileName = \"D:\\\\React\\\\card-game\\\\src\\\\WordCard.js\";\nimport React, { Component } from 'react';\nimport CharacterCard from \"./CharacterCard\";\nimport _ from 'lodash';\n\nconst prepareStateFromWord = given_word => {\n  let word = given_word.toUpperCase();\n\n  let chars = _.shuffle(Array.from(word));\n\n  return {\n    word,\n    chars,\n    attempt: 1,\n    guess: [],\n    completed: false\n  };\n};\n\nexport default class WordCard extends Component {\n  constructor(props) {\n    super(props);\n\n    this.activationHandler = c => {\n      let guess = [...this.state.guess, c.toUpperCase()];\n\n      if (guess.length == 1) {\n        document.getElementById('your-answer').innerHTML = \"Your Answer : \".concat(c.toUpperCase());\n      } else document.getElementById('your-answer').innerHTML += c.toUpperCase();\n\n      this.setState({\n        guess\n      });\n\n      if (guess.length == this.state.chars.length) {\n        console.log('Mistake Word: ' + guess.join('').toString());\n        console.log('Correct Word: ' + this.state.chars.join('').toString());\n\n        if (guess.join('').toString() == this.state.chars.join('').toString()) {\n          this.setState({\n            guess: [],\n            complete: true\n          });\n          document.getElementById('result').innerHTML = \"Congratulations! Or Succees\";\n          document.getElementById('newgame').style.display = \"inline-block\";\n          document.getElementById('answer').style.display = \"none\";\n          document.getElementById('hint').style.display = \"none\";\n        } else {\n          this.setState({\n            guess: [],\n            attempt: this.state.attempt + 1\n          });\n          document.getElementById('result').innerHTML = \"Attempt Or Try Again: \".concat(this.state.attempt, \" \");\n          document.getElementById('result').innerHTML = \"You click is Wrong Word: \".concat(guess.join('').toString(), \" \");\n        }\n\n        if (this.state.attempt == 3) {\n          document.getElementById('result').innerHTML = \"Game Over! So RestartGame\";\n          document.getElementById('result').innerHTML = \"Answer is: \".concat(this.state.chars.join('').toString());\n          setTimeout(() => window.location.reload(false), 3000);\n        }\n      }\n    };\n\n    this.state = prepareStateFromWord(this.props.value);\n  }\n\n  render() {\n    if (this.props.requestAnswer) {\n      this.props.getAnswer(this.state.chars.join(''));\n    } else if (this.props.requestHint) {\n      var x;\n      var lenghtstring = 0;\n      var stringword = \" \";\n\n      for (x in this.state.chars) {\n        lenghtstring++;\n      }\n\n      lenghtstring = lenghtstring / 2;\n      lenghtstring = lenghtstring.toFixed(0);\n\n      for (x = 0; x < lenghtstring; x++) {\n        stringword += this.state.chars[x];\n      }\n\n      this.props.getHint(stringword);\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, Array.from(this.props.value).map((c, i) => React.createElement(CharacterCard, {\n      value: c,\n      key: i,\n      activationHandler: this.activationHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    })));\n  }\n\n}","map":{"version":3,"sources":["D:\\React\\card-game\\src\\WordCard.js"],"names":["React","Component","CharacterCard","_","prepareStateFromWord","given_word","word","toUpperCase","chars","shuffle","Array","from","attempt","guess","completed","WordCard","constructor","props","activationHandler","c","state","length","document","getElementById","innerHTML","setState","console","log","join","toString","complete","style","display","setTimeout","window","location","reload","value","render","requestAnswer","getAnswer","requestHint","x","lenghtstring","stringword","toFixed","getHint","map","i"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport CharacterCard from \"./CharacterCard\";\r\nimport _ from 'lodash';\r\n\r\n\r\n\r\nconst prepareStateFromWord = (given_word) => {\r\n     let word = given_word.toUpperCase()\r\n     let chars = _.shuffle(Array.from(word)) \r\n     return { \r\n         word, \r\n         chars, \r\n         attempt: 1, \r\n         guess: [], \r\n         completed: false \r\n        } \r\n    }\r\n\r\n\r\n\r\nexport default class WordCard extends\r\nComponent {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = prepareStateFromWord(this.props.value)\r\n    }\r\n    activationHandler = (c) =>{\r\n        let guess = [...this.state.guess, c.toUpperCase()]\r\n        if(guess.length == 1){\r\n            document.getElementById('your-answer').innerHTML = `Your Answer : ${c.toUpperCase()}` \r\n        }else\r\n            document.getElementById('your-answer').innerHTML += c.toUpperCase();\r\n        this.setState({guess})\r\n        \r\n\r\n      \r\n        if(guess.length == this.state.chars.length){\r\n            console.log('Mistake Word: '+guess.join('').toString())\r\n            console.log('Correct Word: '+this.state.chars.join('').toString())\r\n            if(guess.join('').toString() == this.state.chars.join('').toString()){\r\n                this.setState({guess: [], complete: true})\r\n                document.getElementById('result').innerHTML = `Congratulations! Or Succees`\r\n                document.getElementById('newgame').style.display = \"inline-block\";\r\n                document.getElementById('answer').style.display = \"none\"\r\n                document.getElementById('hint').style.display = \"none\"\r\n               \r\n                \r\n            }else{\r\n                this.setState({guess: [], attempt: this.state.attempt + 1})\r\n                document.getElementById('result').innerHTML = `Attempt Or Try Again: ${this.state.attempt} `\r\n                document.getElementById('result').innerHTML = `You click is Wrong Word: ${guess.join('').toString()} `\r\n            }\r\n        if(this.state.attempt == 3){\r\n            document.getElementById('result').innerHTML = `Game Over! So RestartGame`\r\n            document.getElementById('result').innerHTML = `Answer is: ${this.state.chars.join('').toString()}`\r\n            setTimeout(() => window.location.reload(false),3000)\r\n        }\r\n        }\r\n    }\r\n    render() {\r\n        if(this.props.requestAnswer){\r\n            this.props.getAnswer(this.state.chars.join(''))\r\n        }\r\n        else if(this.props.requestHint){\r\n            var x;\r\n            var lenghtstring = 0;\r\n            var stringword = \" \";\r\n            for(x in this.state.chars){\r\n                lenghtstring++;\r\n            }\r\n            lenghtstring = lenghtstring/2;\r\n            lenghtstring=lenghtstring.toFixed(0);\r\n            for(x = 0; x < lenghtstring; x++)\r\n            {\r\n                stringword += this.state.chars[x]\r\n        \r\n            }\r\n            this.props.getHint(stringword)\r\n        }\r\n        return (\r\n            <div>\r\n                { Array.from(this.props.value).map((c, i) =><CharacterCard value={c} key={i} activationHandler={this.activationHandler}/>) }\r\n            </div>\r\n        );\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}