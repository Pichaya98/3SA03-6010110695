{"ast":null,"code":"var _jsxFileName = \"D:\\\\React\\\\card-game\\\\src\\\\WordCard.js\";\nimport React, { Component } from 'react';\nimport CharacterCard from \"./CharacterCard\";\nimport _ from 'lodash';\n\nconst prepareStateFromWord = given_word => {\n  let word = given_word.toUpperCase();\n\n  let chars = _.shuffle(Array.from(word));\n\n  return {\n    word,\n    chars,\n    attempt: 1,\n    guess: [],\n    completed: false\n  };\n};\n\nexport default class WordCard extends Component {\n  constructor(props) {\n    super(props);\n\n    this.activationHandler = c => {\n      let guess = [...this.state.guess, c.toUpperCase()];\n      this.setState({\n        guess\n      });\n\n      if (guess.length == this.state.chars.length) {\n        console.log('Mistake Word: ' + guess.join('').toString());\n        console.log('Correct Word: ' + this.state.chars.join('').toString());\n\n        if (guess.join('').toString() == this.state.chars.join('').toString()) {\n          this.setState({\n            guess: [],\n            complete: true\n          });\n          document.getElementById('result').innerHTML = \"Congratulations! Or Succees\"; // document.getElementById('newgame').style.display = \"inline-block\";\n          //document.getElementById('answer').style.display = \"none\";\n        } else {\n          this.setState({\n            guess: [],\n            attempt: this.state.attempt + 1\n          });\n          document.getElementById('result').innerHTML = \"Attempt Or Try Again: \".concat(this.state.attempt, \" \"); //document.getElementById('wordenter').innerHTML = `You click is Wrong Word: ${guess.join('').toString()} `\n        }\n\n        if (this.state.attempt == 3) {\n          document.getElementById('result').innerHTML = \"Game Over! So RestartGame\"; //document.getElementById('wordenter').innerHTML = `Answer is: ${this.state.chars.join('').toString()}`\n\n          setTimeout(() => window.location.reload(false), 3000);\n        }\n      }\n    };\n\n    this.state = prepareStateFromWord(this.props.value);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, Array.from(this.props.value).map((c, i) => React.createElement(CharacterCard, {\n      value: c,\n      key: i,\n      activationHandler: this.activationHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    })));\n  }\n\n}","map":{"version":3,"sources":["D:\\React\\card-game\\src\\WordCard.js"],"names":["React","Component","CharacterCard","_","prepareStateFromWord","given_word","word","toUpperCase","chars","shuffle","Array","from","attempt","guess","completed","WordCard","constructor","props","activationHandler","c","state","setState","length","console","log","join","toString","complete","document","getElementById","innerHTML","setTimeout","window","location","reload","value","render","map","i"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport CharacterCard from \"./CharacterCard\";\r\nimport _ from 'lodash';\r\n\r\nconst prepareStateFromWord = (given_word) => {\r\n     let word = given_word.toUpperCase()\r\n     let chars = _.shuffle(Array.from(word)) \r\n     return { \r\n         word, \r\n         chars, \r\n         attempt: 1, \r\n         guess: [], \r\n         completed: false \r\n        } \r\n    }\r\n\r\n\r\n\r\nexport default class WordCard extends\r\nComponent {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = prepareStateFromWord(this.props.value)\r\n    }\r\n    activationHandler = (c) =>{\r\n        let guess = [...this.state.guess, c.toUpperCase()]\r\n        this.setState({guess})\r\n\r\n      \r\n        if(guess.length == this.state.chars.length){\r\n            console.log('Mistake Word: '+guess.join('').toString())\r\n            console.log('Correct Word: '+this.state.chars.join('').toString())\r\n            if(guess.join('').toString() == this.state.chars.join('').toString()){\r\n                this.setState({guess: [], complete: true})\r\n                document.getElementById('result').innerHTML = `Congratulations! Or Succees`\r\n               // document.getElementById('newgame').style.display = \"inline-block\";\r\n                //document.getElementById('answer').style.display = \"none\";\r\n                \r\n            }else{\r\n                this.setState({guess: [], attempt: this.state.attempt + 1})\r\n                document.getElementById('result').innerHTML = `Attempt Or Try Again: ${this.state.attempt} `\r\n                //document.getElementById('wordenter').innerHTML = `You click is Wrong Word: ${guess.join('').toString()} `\r\n            }\r\n        if(this.state.attempt == 3){\r\n            document.getElementById('result').innerHTML = `Game Over! So RestartGame`\r\n            //document.getElementById('wordenter').innerHTML = `Answer is: ${this.state.chars.join('').toString()}`\r\n            setTimeout(() => window.location.reload(false),3000)\r\n        }\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                { Array.from(this.props.value).map((c, i) =><CharacterCard value={c} key={i} activationHandler={this.activationHandler}/>) }\r\n            </div>\r\n        );\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}